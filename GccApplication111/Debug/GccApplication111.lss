
GccApplication111.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e2  00800060  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800242  00800242  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5a  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000298  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031a  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000369  00000000  00000000  00001b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 34       	cpi	r26, 0x42	; 66
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 e4       	ldi	r26, 0x42	; 66
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 34       	cpi	r26, 0x43	; 67
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 44 01 	call	0x288	; 0x288 <main>
  8a:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z18I2C_StartConditionv>:
// отправка команды СТАРТ
void I2C_StartCondition(void)
{
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <_Z18I2C_StartConditionv+0x4>
}
  9c:	08 95       	ret

0000009e <_Z12I2C_SendByteh>:
}

//отправка байта
void I2C_SendByte(unsigned char c)
{
TWDR = c;//загрузка значения в регистр данных
  9e:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT)|(1<<TWEN);//начаало передачи байта данных
  a0:	84 e8       	ldi	r24, 0x84	; 132
  a2:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
  a4:	06 b6       	in	r0, 0x36	; 54
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <_Z12I2C_SendByteh+0x6>
}
  aa:	08 95       	ret

000000ac <_Z14I2C_SendPockethh>:
TWBR=0xFF;//скорость передачи
}

//отправка SLA_W + байт данных
void I2C_SendPocket (unsigned char value,unsigned char adres_rw)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	c8 2f       	mov	r28, r24
  b2:	d6 2f       	mov	r29, r22
I2C_StartCondition(); // генерируем условие СТАРТ
  b4:	0e 94 49 00 	call	0x92	; 0x92 <_Z18I2C_StartConditionv>
I2C_SendByte(adres_rw); //оправляем адрес устройства+бит запись
  b8:	8d 2f       	mov	r24, r29
  ba:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z12I2C_SendByteh>
I2C_SendByte(value);//отправляем байт данных
  be:	8c 2f       	mov	r24, r28
  c0:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z12I2C_SendByteh>
}

// отправка СТОП
void I2C_StopCondition(void)
{
TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  c4:	84 e9       	ldi	r24, 0x94	; 148
  c6:	86 bf       	out	0x36, r24	; 54
{
I2C_StartCondition(); // генерируем условие СТАРТ
I2C_SendByte(adres_rw); //оправляем адрес устройства+бит запись
I2C_SendByte(value);//отправляем байт данных
I2C_StopCondition();//генерируем условие СТОП
}
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <_Z13lcd_putnibblec>:

#define lcd_putc(x)  lcd_putbyte(x, LCD_DATA)

/* функция передачи тетрады в жки */
void lcd_putnibble(char t)
{
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
    t<<=4;
    LCD_E_SET;
  d2:	90 91 42 02 	lds	r25, 0x0242
  d6:	89 2f       	mov	r24, r25
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	80 93 42 02 	sts	0x0242, r24
  de:	6e e4       	ldi	r22, 0x4E	; 78
  e0:	0e 94 56 00 	call	0xac	; 0xac <_Z14I2C_SendPockethh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	85 e8       	ldi	r24, 0x85	; 133
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <_Z13lcd_putnibblec+0x18>
  ea:	00 00       	nop
#define lcd_putc(x)  lcd_putbyte(x, LCD_DATA)

/* функция передачи тетрады в жки */
void lcd_putnibble(char t)
{
    t<<=4;
  ec:	c2 95       	swap	r28
  ee:	c0 7f       	andi	r28, 0xF0	; 240
    LCD_E_SET;
    _delay_us(50);
    I2C_SendPocketLCD (Led_port|t);
  f0:	80 91 42 02 	lds	r24, 0x0242
  f4:	6e e4       	ldi	r22, 0x4E	; 78
  f6:	8c 2b       	or	r24, r28
  f8:	0e 94 56 00 	call	0xac	; 0xac <_Z14I2C_SendPockethh>
    LCD_E_CLR;
  fc:	80 91 42 02 	lds	r24, 0x0242
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	80 93 42 02 	sts	0x0242, r24
 106:	6e e4       	ldi	r22, 0x4E	; 78
 108:	0e 94 56 00 	call	0xac	; 0xac <_Z14I2C_SendPockethh>
 10c:	85 e8       	ldi	r24, 0x85	; 133
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z13lcd_putnibblec+0x40>
 112:	00 00       	nop
    _delay_us(50);
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <_Z11lcd_putbytecc>:
char c - сам байт
char rs - переменная, указывающая что передается:
     rs = 0 - команда (устанавливается линия RS)
	 rs = 1 - данные (сбрасывается линия RS) */
void lcd_putbyte(char c, char rs)
{
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	18 2f       	mov	r17, r24
    char highc=0;
    highc=c>>4;
 120:	c8 2f       	mov	r28, r24
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	d5 95       	asr	r29
 126:	c7 95       	ror	r28
 128:	d5 95       	asr	r29
 12a:	c7 95       	ror	r28
 12c:	d5 95       	asr	r29
 12e:	c7 95       	ror	r28
 130:	d5 95       	asr	r29
 132:	c7 95       	ror	r28
	if (rs==LCD_COMMAND) LCD_RS_CLR;
 134:	61 11       	cpse	r22, r1
 136:	09 c0       	rjmp	.+18     	; 0x14a <_Z11lcd_putbytecc+0x32>
 138:	80 91 42 02 	lds	r24, 0x0242
 13c:	8e 7f       	andi	r24, 0xFE	; 254
 13e:	80 93 42 02 	sts	0x0242, r24
 142:	6e e4       	ldi	r22, 0x4E	; 78
 144:	0e 94 56 00 	call	0xac	; 0xac <_Z14I2C_SendPockethh>
 148:	08 c0       	rjmp	.+16     	; 0x15a <_Z11lcd_putbytecc+0x42>
	else                 LCD_RS_SET;
 14a:	80 91 42 02 	lds	r24, 0x0242
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 93 42 02 	sts	0x0242, r24
 154:	6e e4       	ldi	r22, 0x4E	; 78
 156:	0e 94 56 00 	call	0xac	; 0xac <_Z14I2C_SendPockethh>
    lcd_putnibble(highc);
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 67 00 	call	0xce	; 0xce <_Z13lcd_putnibblec>
    lcd_putnibble(c);
 160:	81 2f       	mov	r24, r17
 162:	0e 94 67 00 	call	0xce	; 0xce <_Z13lcd_putnibblec>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	08 95       	ret

0000016e <_Z11lcd_putcharc>:

void lcd_putchar(char c)
{
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
    char highc=0;
    highc=c>>4;
	LCD_RS_SET;
 172:	80 91 42 02 	lds	r24, 0x0242
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 93 42 02 	sts	0x0242, r24
 17c:	6e e4       	ldi	r22, 0x4E	; 78
 17e:	0e 94 56 00 	call	0xac	; 0xac <_Z14I2C_SendPockethh>
    lcd_putnibble(highc);
 182:	8c 2f       	mov	r24, r28
 184:	82 95       	swap	r24
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	0e 94 67 00 	call	0xce	; 0xce <_Z13lcd_putnibblec>
    lcd_putnibble(c);
 18c:	8c 2f       	mov	r24, r28
 18e:	0e 94 67 00 	call	0xce	; 0xce <_Z13lcd_putnibblec>
}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <_Z8lcd_initv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	8f e2       	ldi	r24, 0x2F	; 47
 198:	95 e7       	ldi	r25, 0x75	; 117
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <_Z8lcd_initv+0x4>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_Z8lcd_initv+0xa>
 1a0:	00 00       	nop
/* функция инициализации работы жки
в 4-битном режиме, без курсора */
void lcd_init()
{
    _delay_ms(15);
    lcd_putnibble(0b00000011);
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 67 00 	call	0xce	; 0xce <_Z13lcd_putnibblec>
 1a8:	8f e3       	ldi	r24, 0x3F	; 63
 1aa:	9f e1       	ldi	r25, 0x1F	; 31
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <_Z8lcd_initv+0x16>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <_Z8lcd_initv+0x1c>
 1b2:	00 00       	nop
    _delay_ms(4);
    lcd_putnibble(0b00000011);
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0e 94 67 00 	call	0xce	; 0xce <_Z13lcd_putnibblec>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	87 ec       	ldi	r24, 0xC7	; 199
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z8lcd_initv+0x28>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_Z8lcd_initv+0x2e>
 1c4:	00 00       	nop
    _delay_us(100);
    lcd_putnibble(0b00000011);
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 67 00 	call	0xce	; 0xce <_Z13lcd_putnibblec>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	8f ec       	ldi	r24, 0xCF	; 207
 1ce:	97 e0       	ldi	r25, 0x07	; 7
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z8lcd_initv+0x3a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z8lcd_initv+0x40>
 1d6:	00 00       	nop
	 _delay_ms(1);
    lcd_putnibble(0b00000010);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 67 00 	call	0xce	; 0xce <_Z13lcd_putnibblec>
 1de:	8f ec       	ldi	r24, 0xCF	; 207
 1e0:	97 e0       	ldi	r25, 0x07	; 7
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <_Z8lcd_initv+0x4c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <_Z8lcd_initv+0x52>
 1e8:	00 00       	nop
	_delay_ms(1);
    lcd_putbyte(0x28, LCD_COMMAND); // стоит (0x28) 5x8 0b00101000 меняем (0x2C) 5x10 0b00101100 
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 8c 00 	call	0x118	; 0x118 <_Z11lcd_putbytecc>
 1f2:	8f ec       	ldi	r24, 0xCF	; 207
 1f4:	97 e0       	ldi	r25, 0x07	; 7
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <_Z8lcd_initv+0x60>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <_Z8lcd_initv+0x66>
 1fc:	00 00       	nop
    _delay_ms(1);
    lcd_putbyte(0x0C, LCD_COMMAND);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	0e 94 8c 00 	call	0x118	; 0x118 <_Z11lcd_putbytecc>
 206:	8f ec       	ldi	r24, 0xCF	; 207
 208:	97 e0       	ldi	r25, 0x07	; 7
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <_Z8lcd_initv+0x74>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z8lcd_initv+0x7a>
 210:	00 00       	nop
    _delay_ms(1);
    lcd_putbyte(0x06, LCD_COMMAND);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 8c 00 	call	0x118	; 0x118 <_Z11lcd_putbytecc>
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <_Z8lcd_initv+0x88>
 222:	00 c0       	rjmp	.+0      	; 0x224 <_Z8lcd_initv+0x8e>
 224:	00 00       	nop
    _delay_ms(1);
	LCD_BT_SET;//включаем подсветку
 226:	80 91 42 02 	lds	r24, 0x0242
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 93 42 02 	sts	0x0242, r24
 230:	6e e4       	ldi	r22, 0x4E	; 78
 232:	0e 94 56 00 	call	0xac	; 0xac <_Z14I2C_SendPockethh>
	LCD_RW_CLR;//запись r/w
 236:	80 91 42 02 	lds	r24, 0x0242
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	80 93 42 02 	sts	0x0242, r24
 240:	6e e4       	ldi	r22, 0x4E	; 78
 242:	0e 94 56 00 	call	0xac	; 0xac <_Z14I2C_SendPockethh>
 246:	08 95       	ret

00000248 <_Z9lcd_clearv>:

/* функция очистки дисплея и возврата
курсора в начальную позицию*/
void lcd_clear()
{
    lcd_putbyte(0x01, LCD_COMMAND);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 8c 00 	call	0x118	; 0x118 <_Z11lcd_putbytecc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	87 eb       	ldi	r24, 0xB7	; 183
 252:	9b e0       	ldi	r25, 0x0B	; 11
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <_Z9lcd_clearv+0xc>
 258:	00 c0       	rjmp	.+0      	; 0x25a <_Z9lcd_clearv+0x12>
 25a:	00 00       	nop
 25c:	08 95       	ret

0000025e <_Z13lcd_putstringPc>:
  adr|=0x80;
  lcd_putbyte(adr, LCD_COMMAND);
}

void lcd_putstring (char stroka[])
{  char i;
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
   for(i=0;stroka[i]!='\0';i++)
 266:	88 81       	ld	r24, Y
 268:	88 23       	and	r24, r24
 26a:	51 f0       	breq	.+20     	; 0x280 <_Z13lcd_putstringPc+0x22>
 26c:	10 e0       	ldi	r17, 0x00	; 0
   lcd_putchar(stroka[i]);
 26e:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z11lcd_putcharc>
  lcd_putbyte(adr, LCD_COMMAND);
}

void lcd_putstring (char stroka[])
{  char i;
   for(i=0;stroka[i]!='\0';i++)
 272:	1f 5f       	subi	r17, 0xFF	; 255
 274:	fe 01       	movw	r30, r28
 276:	e1 0f       	add	r30, r17
 278:	f1 1d       	adc	r31, r1
 27a:	80 81       	ld	r24, Z
 27c:	81 11       	cpse	r24, r1
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <_Z13lcd_putstringPc+0x10>
   lcd_putchar(stroka[i]);
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <main>:
}

//инициализация I2C как передатчика
void I2C_Init (void)
{
TWBR=0xFF;//скорость передачи
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	80 b9       	out	0x00, r24	; 0
};

int main(void)
{
	I2C_Init();
	lcd_init();
 28c:	0e 94 cb 00 	call	0x196	; 0x196 <_Z8lcd_initv>
	lcd_clear();
 290:	0e 94 24 01 	call	0x248	; 0x248 <_Z9lcd_clearv>
	lcd_putstring(unit[0]);
 294:	80 e6       	ldi	r24, 0x60	; 96
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z13lcd_putstringPc>
void lcd_gotoxy(char col, char row)
{
  char adr;
  adr=0x40*row+col;
  adr|=0x80;
  lcd_putbyte(adr, LCD_COMMAND);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	0e 94 8c 00 	call	0x118	; 0x118 <_Z11lcd_putbytecc>
	lcd_gotoxy(0,1);
	lcd_putstring(unit[1]);
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z13lcd_putstringPc>
		lcd_gotoxy(0,1);
		lcd_putstring(unit[n++]);
		_delay_ms(1000);
		if (n==15)
		{
			n=13;
 2ac:	cd e0       	ldi	r28, 0x0D	; 13
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_putstring(unit[0]);
	lcd_gotoxy(0,1);
	lcd_putstring(unit[1]);
    while(1)
    {
        lcd_clear();
 2b0:	0e 94 24 01 	call	0x248	; 0x248 <_Z9lcd_clearv>
		lcd_putstring(unit[n++]);	
 2b4:	80 91 40 02 	lds	r24, 0x0240
 2b8:	90 91 41 02 	lds	r25, 0x0241
 2bc:	9c 01       	movw	r18, r24
 2be:	2f 5f       	subi	r18, 0xFF	; 255
 2c0:	3f 4f       	sbci	r19, 0xFF	; 255
 2c2:	30 93 41 02 	sts	0x0241, r19
 2c6:	20 93 40 02 	sts	0x0240, r18
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	82 95       	swap	r24
 2d0:	92 95       	swap	r25
 2d2:	90 7f       	andi	r25, 0xF0	; 240
 2d4:	98 27       	eor	r25, r24
 2d6:	80 7f       	andi	r24, 0xF0	; 240
 2d8:	98 27       	eor	r25, r24
 2da:	80 5a       	subi	r24, 0xA0	; 160
 2dc:	9f 4f       	sbci	r25, 0xFF	; 255
 2de:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z13lcd_putstringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	80 e7       	ldi	r24, 0x70	; 112
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x60>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x6a>
 2f2:	00 00       	nop
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 ec       	ldi	r24, 0xC0	; 192
 2f8:	0e 94 8c 00 	call	0x118	; 0x118 <_Z11lcd_putbytecc>
		_delay_ms(100);
		lcd_gotoxy(0,1);
		lcd_putstring(unit[n++]);
 2fc:	80 91 40 02 	lds	r24, 0x0240
 300:	90 91 41 02 	lds	r25, 0x0241
 304:	9c 01       	movw	r18, r24
 306:	2f 5f       	subi	r18, 0xFF	; 255
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	30 93 41 02 	sts	0x0241, r19
 30e:	20 93 40 02 	sts	0x0240, r18
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	82 95       	swap	r24
 318:	92 95       	swap	r25
 31a:	90 7f       	andi	r25, 0xF0	; 240
 31c:	98 27       	eor	r25, r24
 31e:	80 7f       	andi	r24, 0xF0	; 240
 320:	98 27       	eor	r25, r24
 322:	80 5a       	subi	r24, 0xA0	; 160
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z13lcd_putstringPc>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	89 e6       	ldi	r24, 0x69	; 105
 32e:	98 e1       	ldi	r25, 0x18	; 24
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0xa8>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0xb2>
 33a:	00 00       	nop
		_delay_ms(1000);
		if (n==15)
 33c:	80 91 40 02 	lds	r24, 0x0240
 340:	90 91 41 02 	lds	r25, 0x0241
 344:	0f 97       	sbiw	r24, 0x0f	; 15
 346:	09 f0       	breq	.+2      	; 0x34a <main+0xc2>
 348:	b3 cf       	rjmp	.-154    	; 0x2b0 <main+0x28>
		{
			n=13;
 34a:	d0 93 41 02 	sts	0x0241, r29
 34e:	c0 93 40 02 	sts	0x0240, r28
 352:	ae cf       	rjmp	.-164    	; 0x2b0 <main+0x28>

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
